김민태의 프론트엔드 아카데미 : 만들어보며 이해하는 React & Redux


Part 1. 시작하며
01. 무엇을 배울 것인가
소프트웨어 : 문제를 해결하기 위한 무언가.
- 계속 바뀌어야 함
- 안전하게, 문제 없이 바뀌어야 함
- 안전하게 바뀌기 위해서는 코드에 대한 이해가 필요함
- 어떤 코드가 좋은 코드인가? 에 대한 연구를 지속함 
- 핵심 키워드 : 변경 용이성, ‘어떻게 하면 잘 바꿀 수 있을까’, ‘바꿔도 올바르게 동작할 수 있을까’, ‘만약 동작하지 못해도, 올바르지 못한 동작이 최소한의 영향 범위를 가졌는가?’


어떤 것이 변화했을 때, 그 변화에 대한 영향 범위를 특정 범위로 축소할 수 있는 식으로 코드가 만들어지면
훨씬 더 안전하고 단단하고 견고한 ‘코드’가 된다는 것을 알 수 있다.

핵심 -> 소프트웨어는 변한다. 변하는데, 과연 어떻게 더 빨리, 안전하게 변화시킬 수 있을까? 


02. 1타 2피, 3피, 4피
React와 Redux는 왜 만들어졌을까? -> 문제를 해결하기 위해
그렇다면 문제점은 무엇일까? -> 웹 어플을 개발함에 있어서 가장 많은 문제를 일으키는 요소가 있다.

그것은 바로 DOM API! (DOM이란? 브라우저가 Html 렌더링하기 위해 필요한 모든 것을 가공시켜 놓은 객체.)
DOM API의 경우, 엄청나게 많은 기능을 제공하지만 다루는 게 굉장히 까다롭다.
따라서 웹 앱을 만드는데 만드는 데 최적화되어 있지 않다. (목적 자체가 웹앱을 만들기 위해 설계된 게 아님.)

SPA : Html은 문서다. 우리가 아는 웹의 경우, html에서 html로 넘어갈 때 화면이 깜빡인다. 어플리케이션의 경우 화면이 넘어갈 때마다 리로딩 되면 굉장히 불편해진다.
우리가 앱을 사용할 때를 한번 생각해보자. 아이콘 하나를 누를 때마다 페이지 전환이 되면 얼마나 불편할 것인가?
이걸 해결하게 위해서 만들어진 게 React, Vue  같은 프레임워크들이다.

DOM API의 return 값을 모두 참조형이다. 
여기서 깨알 복습
document.body.appendChild(); html에 무언가를 붙여넣을 때 쓰는 것
document.getElementsByTageName(‘h2’): 태그로 선택하기
document.querySelectorall(‘h1’):태그로 선택하기

HTML 컬렉션은 라이브 오브젝트고, 라이브 오브젝트는 참조를 항상 가지고 있다.
그말은 HTML 컬렉션이 아닌 것들은 라이브 오브젝트가 아니며, 참조가 끊긴다는 뜻이다.
예를 들면 H1은 HTML, 컬렉션이지만, 대문자 ‘H1’은 NodeList이다. NodeList는 라이브 오브젝트가 아니라 참조가 연속되지 않고 끊긴다.
이렇게 일괄성 없는 동작들이 DOM API에 너무나 많이 있다는 점…ㅠ ㅠ



클라이언트 어플리케이션을 만들며 많이 접하는 패턴 중 하나가 MVC 패턴(Model-View-Controller 패턴)이다.
모델 뷰 컨트롤라고 불리는 이 패턴은, UI요소, 비즈니스 로직, 그리고 데이터들을 분리해서 복잡도를 낮추게 하는 것이다.
성격이 다른 애들이 뒤섞여 있으면 복잡도가 높아지지 않겠는가? 비슷한 것들끼리 분류시켜서 복잡도를 낮추자!
이 MVC모델 같은 경우에는, 서버의 모델에 굉장히 종속성을 많이 갖고 있게 된다. 따라서 서버가 바뀌면 클라이언트도 영향을 많이 받게 되는 단점을 가지게 된다.

그렇다면 서버 종속성을 끊어내고, 클라이언트에 맞는 패턴을 가질 수는 없을까?
모델-뷰-뷰모델 MVVM 
클라이언트에서 상태를 독립적으로 가지고 있고, 독립 상태를 유지할 수 있는 여러 컨셉들을 가지고 있게끔.
React, Angular, Vue에 굉장히 영향을 많이 미친 패턴이다.

But MVC나 MVVM은 DOM 자체의 문제를 해결해 주지는 않는다.

JQuery의 경우에도 돔을 쉽게 포장했을 뿐, 근본적으로 DOM의 문제들을 해결해준 건 아니다.
React의 경우에는, 1타 2피 3피 4피가 가능한 컨셉을 발견하게 된다. 바로 DOM 자체를 쓰지 않는 것이다. 
DOM을 쓰지 않는다고? 어떻게 UI를 핸들링할까?
잊지 말자. React의 가치는 문제가 많은 DOM API 를 사용하지 않음에 있다.


* React의 등장
React의 경우에는, 1타 2피 3피 4피가 가능한 컨셉을 발견하게 된다. 바로 DOM 자체를 쓰지 않는 것이다. 
DOM을 쓰지 않는다고? DOM을 안 쓰고 어떻게 UI를 핸들링할까?
잊지 말자. React의 가치는 문제가 많은 DOM API 를 사용하지 않음에 있다.


03. 작게 시작하기

2강에 이어서…
DOM을 없애서 문제를 해결했다? -> React 나름의 획기적인 접근 방법이라 할 수 있다.
 
※ 최소 기능 제품 : Minimum Viable Product -> MVP 
최소한의 기능을 구현한 제품.
React에 MVP를 적용해보자. 리액트에 여러 기능들을 이것저것 넣게 되면 가장 중요한 특징에 대한 선명도가 떨어질 수 있다. 
따라서 DOM을 없애 문제를 해결한다는 근본 기능에 초점을 두고 개발을 해야 한다.

* React가 궁금하면, 역사를 살펴보자!
React가 개발되어온 과정을 한번 살펴보자.
초창기 버전에는 MVP 버전만 포함되어 있다. 
React의 옛날 고리짝적 버전인 MVP 버전을 보면, React는 UI를 만들기 위한 라이브러리라고 정의되어 있다. (왜냐하면, DOM과 연결된 뷰, UI상의 문제를 해결하기위해 개발된 것이기 때문에)


04. 변경하지 않고 확대하기
추가, 변경 기능을 가장 잘 핸들링할 수 있는 방법에 대해 생각해보자.

소프트웨어의 어떤 부분은 안 바뀌는 부분으로 만들어 놓고 / 어떤 부분은 바뀌도록 만들어 보자.

안 바뀌는 부분과 바뀌는 부분을 분리해서 개발하는 구조 
- 플러그인
	애드온이라고 하기도 한다. 대표적인 플러그인 아키텍처에는 ‘크롬’이 있다. 
	크롬 웹스토어에 들어가 보면 ‘확장 프로그램’이라는 게 있다. 이 크롬 익스텐션이 바로 플러그인이라고 할 수 있다. 
	크롬의 기능을 바꾸지 않으며, 더 많은 일을 할 수 있게 해 주는 게 이 크롬 익스텐션이다. 
	
- 미들웨어 플러그인과 유사한 구조.
	ex) 익스프레스 - 노드의 웹 어플 프레임워크
	자신이 제공하는 몇몇 기능이 있긴 하지만, 더 추가적으로 많은 기능을 모두 다 제공할 수 없기 때문에 미들웨어라고 하는 소프트웨어를 추가할 수 있는 구조를 제공해 주고, 전체적으로 Express가 제공하는 기능이 확대될 수 있도록 해 준다.
	이렇게 함께 작동되는 프로그램이 있어도, express 자체의 기능은 전혀 변경되지 않는다 (예시 myLogger와 함께 적용되었을 때.)

플러그인, 미드웨어의 공통점 : 호스트 ‘코드’에 대한 변경 없이 새로운 기능을 사용할 수 있는 환경을 만들어 준다.


05. 웹프론트엔드 개발환경 (더 알아보기)

Bundler : web pack
webpack의 기능 : 개별적인 기능을 제공하는 데 필요한 코어의 구조를 가지고 있고, 실 사용자들이 필요로 하는 기능은 plugin, middleware 의 기능이다.
웹팩은 플러그인이라는 아키텍처를 이용해 사용자들에게 다양하고 유연한 기능을 제공하고 있다.

Babel : transpiling을 해 주는 loader. 플러그인 아키텍처로 만들어져 있다. 대부분의 기능들은 plugin을 이용해 제공된다. 
VSC(에디터) : 이 역시 수 많은 plugin으로 이루어져 있다. (익스텐션이라고 부른다.) 코어는 전혀 변하지 않지만, 기능은 끊임없이 확장시킬 수 있게 된다.










Part2. React 만들기
 
01. 해결책 만들기
DOM은 기능은 많지만, 복잡한 문제를 다루기에는 불편하다. 유지보수, 확장이 힘들어지는 문제를 가지고 있다.
소프트웨어란, 한 사람이 계속 Maintenance 할 수 있는 게 아니다. 그것을 유지보수 하는 사람들은 계속해서 바뀔 것이라는 사실을 명심해야 한다.
 
그렇다면 이 ‘유지보수’의 어려움을 어떻게 해결할 것인가?
-> React의 경우에는 Virtual DOM을 만들어서 DOM자체의 사용을 최소화했다.
 
 
HTML은 흔히 보는 마크업 파일이다. 태그, attr, value 의 문자열로 되어 있다.
 
이 태그들을 브라우저가 읽어서 DOM 형태로 만들고, 이것을 렌더링시킴으로서 우리가 페이지를 볼 수 있게 된다.
 
오른쪽의 자바스크립트 파일은 html을 생성할 때 쓰이는 코드이다. 메소드들을 이용해 DOM 요소들을 생성해 낼 수 있다. 
 
여기서 문제는? html은 부모/자식 태그라고 하는 복잡한 구조를 가지고 있다. 따라서 복잡하고, 일관성이 없는 DOM API를 이용해 html을 조작하려고 하면? 오류가 생기게 된다.
 
하지만 DOM API를 쓰지 않으면 html을 조작할 수 있는 방법이 없다.
 
 
React 팀은 어떻게 생각했을까? -> DOM을 걍 함 안 써보자! (굉장히 급진적인 발상…)
 
실상 -> DOM을 ‘개발자’에게 쓰지 못하게 하자.  개발자에게 DOM이 사라진거나 마찬가지.
 
(소프트웨어 개발하는 데 있어서 굉장히 흔하게 쓰이는 아이디어)
 
사실 문자열로 되어 있는 파일 (HTML)은 굉장히 다루기 까다로운 것이다. 우리는 ‘개발자’이기 때문에 결과물을 연상, 상상할 수 있는 것.
 
그러면 이 복잡성을 줄이려면? 문자열을 없애보자. 문자열이 아니라, HTML이 ‘객체’를 다루게 만들어보자.
 
(객체는 문자열보다 상대적으로 더 쉬운 포맷이라고 할 수 있다.) 
 
 
DOM API가 다루기 까다로운 것이므로, 사용자들에게는 DOM API보다 더 쉬운 걸 제공해주고, DOM API는 개발자들이 제어권을 가지고, 더 쉬운 방식으로 다루게 해 보자.
 
Step
복잡한 DOM 객체를 아주 간단한 객체로 바꾸어 보자.
그 간단한 객체를 다시 복잡한 DOM으로 바꾸어 보자.
 
 
html의 구조를 살펴보면?
부모, 자식 구조로 이루어져 있다.
태그는 각각의 attribute를 가지고 있다.
attritbute에는 각각의 value를 가지고 있다.
 
 아이디어 -> 복잡한 것이 있으면 간단한 것으로 바꿔보고, 그 간단한 것에서부터 출발하는 것이다.




02. 객체 to DOM Render
 
html안에 컨테이너로 id root의 div 를 만든다.
app.js 파일을 만든 후 script 태그를 통해 연결해준다.
목적은? 객체를 DOM으로 만드는 것. 따라서 객체를 하나 만들어보자.
객체는 DOM보다 단순해야 하고, 우리가 필요한 기능만 가지고 있어야 한다.
 
객체 요소는 tag, props, children (태그를 만들 때 필요한 것들)
props는 attribute와 value로 이루어질것이기 때문에 첫 값을 빈 배열로,
children은 배열로 해 놓는다. (이 안에 다른 태그가 들어간다.)
 
 
이 객체를 입력으로 받아 DOM으로 만드는 함수를 만들어 보자.
DOM은 어떻게 만들까? DOM API를 사용하자.
태그를 만드는 API -> createElement
DOM을 만들어 주는 ㅊreateDOM이라는 함수를 생성한다.
vdom을 받아와 tag를 생성한다.
 
잠깐, 인자 이름이 vdom인게 적절할까?
-> 정확히 ㅊreateDOM 함수는 vdim, 입력 객체를 받아서 (하나의 태그를 받아서, TextNode가 될 데이터를 받아) DOM node를 생성하는 함수다.
최종적으로 root가 하나인 한 개의 DOM을 만들어내지만,
개별적으로는 DOM 내 하나하나의 노드가 될 요소들을 처리하는 처리기라고도 할 수 있다.
따라서 이것은 node 생성기이기 때문에, vdom을 node로 바꿔준다.



*this 바인딩이란?
this는 자바스크립트에서 조금 골치아픈 존재이다.
그리고 경우에 따라서 this는 획획 바뀔 수 있다. 그렇기 때문에 this를 고정시키는 방법이 존재한다.
이를 this바인딩이라고 한다.
 
즉 function object는 모두 bind를 사용할 수 있다는 것이다.
bind함수를 사용하면 this는 내가 정한 object로 고정된다.
 
따라서 명시적으로 특정 객체를 지정해야 하는 경우, bind()메소드를 사용할 수 있다.
 
코드를 bind() 함수로 구성하면 다음과 같이 this의 항목을 명시해서 넘길 수 있다.
즉, 호출을 누가하느냐에 따라 this의 참조가 바뀔 수 있기 때문에 이를 고정(bind())하는 것이다.
 
-> js는 함수 호출한 주체가 누구냐에 따라 this의 참조가 바뀐다.
 
우리가 DOM 자체를 만드는 건 그렇게 어려운 게 아니구나 ‘ㅁ’



function createDOM(node) {
    // children이 객체가 아니라 문자열일 경우, 재귀적으로 들어갔을 때 먹히지 않을 수 있음. 따라서 태그가 아닐 경우, 문자열로 들어올 때의 처리 방안을 적어준다.
    if (typeof node === 'string'){
        return document.createTextNode(node);
        //children에 문자열이 들어올 경우 바로 문자열 출력
    }

    const element = document.createElement(node.tag);
    
    node.children
    .map(createDOM) //node의 깊이만큼 계속 순회하게 됨
    .forEach(element.appendChild.bind(element));
    // 재귀적으로 작동하는 code : 아무리 깊은 자식 요소가 있더라도 작동함.
    return element;
}

const node = {
    tag: "p",
    props: {},
    children: [
        {
            tag: "h1",
            props: {},
            children: [
                //자식 요소로 태그도 있을 수 있지만, text 컨텐츠도 가능하다.
                "리액트 만들기"
            ],
        },
        {
            tag: "ul",
            props: {},
            children: [
                {
                    tag: "li",
                    props: {},
                    children: ["첫 번째 아이템"],
                },
                {
                    tag: "li",
                    props: {},
                    children: ["두 번째 아이템"],
                },
                {
                    tag: "li",
                    props: {},
                    children: ["세 번째 아이템"],
                }
            ],
        }
    ],
}

document.querySelector('#root')
.appendChild(createDOM(node));
//node을 입력으로 주고 element를 return하게 된다.

*깨알 복습
map 메서드는 콜백 함수를 이용해 각각의 요소에 호출해서 그 값을 변환할 수 있게 해 준다.
콜백 함수는 배열의 각 요소에 실행된 후, 새 값을 퉤 하고 뱉어낸다.

완전한 map()메소드 구문
arr.map(function(element, index, array){  }, this);

Foreach 메서드는 콜백 함수, 익명 함수를 이용해 배열을 순회한다. 





03. webpack과 babel 세팅
build할 수 있는 구조로 만들기

1. 프로젝트를 npm이 가능하도록 셋업해둔다. npm init으로 package.json 생성 
2. 웹팩 설치
	npm install webpack-cli --save-dev
여기서 cli는 웹팩의 이름 / 개발환경에서 쓸 것이므로 save dev 넣어줌 
3. 웹팩 데브서버 설치, 바벨 로더, 바벨 플러그인(바벨 코어, 바벨 preset-env, preset-react 설치
npm install webpack-dev-server babel-loader @babel/preset-env @babel/preset-react html-webpack-plugin --save-dev
node_modules 폴더 만들어짐

*여기서 잠깐
웹팩이란? 모듈 번들링이라고 한다.
모듈 번들링이란 : html파일에 들어가는 js파일을 하나의 js파일로 만들어주는 방식 
다수의 js파일을 하나의 js파일로 만들어주는 것을 웹펙이라고 한다.



4. webpack config 만들기 bundling 파일 설정을 위한 웹팩 컨피그 파일 만들기 
기본적으로 node.js 파일임 (노드 문법 써야 함)
webpack의 입력 값으로 config를 제공하는 역할을 하기 때문에, 웹팩이 필요한 형태로 객체를 export해줘야 한다.

5. Web pack config 파일에 module.exports 만들기 웹팩의 모듈과 플러그인이 하는 일 : 웹팩 -> 엔트리에 입력한 자바스크립트 파일로부터 시작해, 그걸 입력으로 읽어들인 다음, 그걸 변환 과정을 거쳐 출력을 하게 된다.

이때, 변환 과정에 무슨 일이 일어날지는 웹팩이 결정하는 게 아니다. 웹팩에게 프로그램을 지정한 다음 그 프로그램들에게 엔트리로 들어온 파일을 넘겨준다. 그러면 그 프로그램들이 엔트리로 들어온 파일들을 어찌어찌 변환시켜 웹팩에 출력시켜준다.
여기서 출력 결과, 즉 하나의 파일을 만들어줄 때 따로 또 처리해야 할 일이 있다면 또 그것만을 위한 소프트웨어와 프로세스를 따로 정의한다.

이것을 하는 프로그램을 plugin이라고 부르고, 여기에 n개의 소프트웨어들을 설정해주면 마지막 처리과정에 개입해서 무언가를 할 수 있게 된다.

예시
ES6 이상의 문법으로 만들어진 js파일을 입력으로 받고(엔트리에 설치하고)
모듈에 이것을 ES5로 변환해주는 트랜스파일러를 세팅한 후
플러그인에다가 콘솔로그, 주석을 제거하는 plugin을 세팅해주고 
번들링을 돌리면 순서대로 실행이 된다.


6. 모드 : web pack 파일의 용도 - 최종 서비스 할 파일을 만들 것인가? 개발할 파일을 만드는 것인가?

7. entry : 입력을 지정한다. App.js

8. output : path : 디렉토리명 (다른 컴퓨터 시스템, 다른 os에서도 build를 할 때 동작할 수 있게! 간단하게 node가 제공하는 path라는 패키지를이용해 지정해 보자.)
nodeJS파일의 경우, require 구문을 쓰게 된다.

const path = require(‘path’);
 path.resolve(__dirname, ’dist’), dirname은 노드 js가 제공해주는 것. 
 filename: 파일이름 bundle.js가 흔히 쓰인다.

9. module 안에 들어가는 것 
 rules 가 들어가는 이유? webpack이 정한 규칙이다. rules안에는 loader들이 들어간다. 
 여기서 loader이 n개니까 rules은 배열이고, 거기에 각각의 loader들이 어떻게 동작할지를 넣어주기 때문에 객체를 넣어준다. 
이때 key는 use를 쓰는데, loader에다가 로더의 이름을 넣어준다. options 에다가는 presets, presets 바벨 플러그인 이름들을 넣어준다.

문제! 모든 입력 파일이 babel-loader,가 처리할 수 있는 js파일이 아닐 수도 있다. css파일, 이미지 파일 등 다양한 파일 형식이 입력될 수 있다.

10. 따라서 필요 없는 파일들을 제거할 수 있는 ‘test’라는 옵션을 추가한다. test에는 정규식이 들어간다.  

test: /\.js$/,
이렇게 입력하면 확장자가 js파일만 넣어줘, 라는 뜻이 된다 :)

11. 두 번째, node_modules 같은 특정 디렉토리들을 제외한다. exclude 옵션을 이용함.
exclude: /node_modules/,



12. plugin 세팅 
html webpack plugin : html파일을 받아서 최종적인 bundiling 파일에 output으로 내보낼 때 사용될 html파일을 생성하거나, 템플릿화해서 다른 부가적인 처리를 할 수도 있는 기능을 제공한다.


const HtmlWebpackPlugin = require('html-webpack-plugin');
으로 웹팩플러그인 깔아준 후 new를 이용해 인스턴스를 생성한다.

 new HtmlWebpackPlugin({
            title: 'webpack & babel setup',
            template: 'index.html',
        })
다음과 같이 넣어주기!


13. babel.config.json으로 바벨 관련 추가 설정하기

{
    "presets":["@babel/preset"]
}

입력

14. devServer관련 세팅
    compress: true,
    port: 9999,


15. package-json에 build 관련 내용 설정
    "build": "webpack",
    "dev" : "webpack serve”,

scripts에 위 내용 추가한다.


16. 이제 npm run build 해보면 dist라는 파일이 생기고, 그 밑에 html과 bundle.js파일이 생긴 걸 확인할 수 있다. 잘 작동!

(참고로 npm run dev 할 경우에는 개발서버이기 때문에 번들.js가 생기지 않음)

<script defer src="bundle.js"></script></head>
을 지워주고 다시 build하기
(템플릿 역할, 즉 스크립트가 변환되서 들어간 건 지워줘야 한다. 왜 그런지 좀 더 알아보기)

17. 코드 정리
프로젝트가 커지면  config 파일도 많아질테고, 소스코드와 Bundling 파일들이 구분이 좀 더 명확할 필요가 있다.

따라서 개발할 때 쓰는 코드들은 다른 디렉토리로 분리하기.

src 폴더 만들고 app.js 옮겨놓기! (번들링 오류가 난다.)

src 폴더 안에다가 React.js를 만든 다음 app.js 내용 중 React와 관련되어 있는 기능을 옮겨 본다.

function에 export 추가하면 불러와서 쓰는 게 가능해진다.


이제 createDOM 에 아까전에 미구현했던 props 처리하는 걸 넣어보자.

property를 처리하는, setAttribute하는 코드를 작성해보자.

Element를 만든 다음, element의 setAttribute를 호출해준다.

node의 안에 들어있는 props 속성 안에 있는 key를 문자열로 빼내서 작성해보자.



아까 app.js를 src 안으로 옮겼기 떄문에, 웹팩컨피그의 app.js 경로를 ./src/app.js로 바꾸어주자.


 
04. Create Element
라이브러리, 프레임워크는 소프트웨어를 만들기 위한 소프트웨어라고 보면 된다.
-> 사용자들이 이용하는 데 편리해야 한다.
 
DOM 으로 만들면 복잡한 것을, vdom이라는 가상 돔을 만들어 tag, props, children. 세 가지만 가져와 띄울 수 있게 만드는 vdom의 개념
 
Vdom을 어떻게 하면 더욱 편리하게 만들 수 있을까? -> vdom이 세 개의 속성을 가지고 있는 객체라는 점에서 접근해 보자.  이 경우 우리는 ‘반복’이라는 기능을 이용할 수 있다.
 
export function createElement(tag, props, children) {
    return { tag, props, children }
}
 생성
 
const vdom2 = createElement('p', {}, createElement('h1', {}, "React 만들기"));
 
이렇게 vdom2라는 걸로 실험을 해보자. Children 자리에 있는 createElement 는 배열이어야 한다. 어떻게 하면 배열로 만들 것인가?
 
DOM객체와 똑같이, root가 최상단인 트리 구조의 DOM가 만들어진다. 항상 createElement는 맨 상위에 한 번만 호출되고, 하위 요소는 children이라는 배열에 들어가야 하니, children을 가변 인자로 받고, 그 가변 인제를 배열로 취급하면 어떨까?
 
참고로 이 방법은 createElement의 children을 가변인자로 다루는 방법을 채택하고 있기 때문에, 그 밑에 주루루룩 뭔가가 달리면 복잡해지는 단점이 있다.
 


