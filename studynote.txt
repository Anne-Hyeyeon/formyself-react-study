김민태의 프론트엔드 아카데미 : 만들어보며 이해하는 React & Redux


Part 1. 시작하며
01. 무엇을 배울 것인가
소프트웨어 : 문제를 해결하기 위한 무언가.
- 계속 바뀌어야 함
- 안전하게, 문제 없이 바뀌어야 함
- 안전하게 바뀌기 위해서는 코드에 대한 이해가 필요함
- 어떤 코드가 좋은 코드인가? 에 대한 연구를 지속함 
- 핵심 키워드 : 변경 용이성, ‘어떻게 하면 잘 바꿀 수 있을까’, ‘바꿔도 올바르게 동작할 수 있을까’, ‘만약 동작하지 못해도, 올바르지 못한 동작이 최소한의 영향 범위를 가졌는가?’


어떤 것이 변화했을 때, 그 변화에 대한 영향 범위를 특정 범위로 축소할 수 있는 식으로 코드가 만들어지면
훨씬 더 안전하고 단단하고 견고한 ‘코드’가 된다는 것을 알 수 있다.

핵심 -> 소프트웨어는 변한다. 변하는데, 과연 어떻게 더 빨리, 안전하게 변화시킬 수 있을까? 


02. 1타 2피, 3피, 4피
React와 Redux는 왜 만들어졌을까? -> 문제를 해결하기 위해
그렇다면 문제점은 무엇일까? -> 웹 어플을 개발함에 있어서 가장 많은 문제를 일으키는 요소가 있다.

그것은 바로 DOM API! (DOM이란? 브라우저가 Html 렌더링하기 위해 필요한 모든 것을 가공시켜 놓은 객체.)
DOM API의 경우, 엄청나게 많은 기능을 제공하지만 다루는 게 굉장히 까다롭다.
따라서 웹 앱을 만드는데 만드는 데 최적화되어 있지 않다. (목적 자체가 웹앱을 만들기 위해 설계된 게 아님.)

SPA : Html은 문서다. 우리가 아는 웹의 경우, html에서 html로 넘어갈 때 화면이 깜빡인다. 어플리케이션의 경우 화면이 넘어갈 때마다 리로딩 되면 굉장히 불편해진다.
우리가 앱을 사용할 때를 한번 생각해보자. 아이콘 하나를 누를 때마다 페이지 전환이 되면 얼마나 불편할 것인가?
이걸 해결하게 위해서 만들어진 게 React, Vue  같은 프레임워크들이다.

DOM API의 return 값을 모두 참조형이다. 
여기서 깨알 복습
document.body.appendChild(); html에 무언가를 붙여넣을 때 쓰는 것
document.getElementsByTageName(‘h2’): 태그로 선택하기
document.querySelectorall(‘h1’):태그로 선택하기

HTML 컬렉션은 라이브 오브젝트고, 라이브 오브젝트는 참조를 항상 가지고 있다.
그말은 HTML 컬렉션이 아닌 것들은 라이브 오브젝트가 아니며, 참조가 끊긴다는 뜻이다.
예를 들면 H1은 HTML, 컬렉션이지만, 대문자 ‘H1’은 NodeList이다. NodeList는 라이브 오브젝트가 아니라 참조가 연속되지 않고 끊긴다.
이렇게 일괄성 없는 동작들이 DOM API에 너무나 많이 있다는 점…ㅠ ㅠ



클라이언트 어플리케이션을 만들며 많이 접하는 패턴 중 하나가 MVC 패턴(Model-View-Controller 패턴)이다.
모델 뷰 컨트롤라고 불리는 이 패턴은, UI요소, 비즈니스 로직, 그리고 데이터들을 분리해서 복잡도를 낮추게 하는 것이다.
성격이 다른 애들이 뒤섞여 있으면 복잡도가 높아지지 않겠는가? 비슷한 것들끼리 분류시켜서 복잡도를 낮추자!
이 MVC모델 같은 경우에는, 서버의 모델에 굉장히 종속성을 많이 갖고 있게 된다. 따라서 서버가 바뀌면 클라이언트도 영향을 많이 받게 되는 단점을 가지게 된다.

그렇다면 서버 종속성을 끊어내고, 클라이언트에 맞는 패턴을 가질 수는 없을까?
모델-뷰-뷰모델 MVVM 
클라이언트에서 상태를 독립적으로 가지고 있고, 독립 상태를 유지할 수 있는 여러 컨셉들을 가지고 있게끔.
React, Angular, Vue에 굉장히 영향을 많이 미친 패턴이다.

But MVC나 MVVM은 DOM 자체의 문제를 해결해 주지는 않는다.

JQuery의 경우에도 돔을 쉽게 포장했을 뿐, 근본적으로 DOM의 문제들을 해결해준 건 아니다.
React의 경우에는, 1타 2피 3피 4피가 가능한 컨셉을 발견하게 된다. 바로 DOM 자체를 쓰지 않는 것이다. 
DOM을 쓰지 않는다고? 어떻게 UI를 핸들링할까?
잊지 말자. React의 가치는 문제가 많은 DOM API 를 사용하지 않음에 있다.


* React의 등장
React의 경우에는, 1타 2피 3피 4피가 가능한 컨셉을 발견하게 된다. 바로 DOM 자체를 쓰지 않는 것이다. 
DOM을 쓰지 않는다고? DOM을 안 쓰고 어떻게 UI를 핸들링할까?
잊지 말자. React의 가치는 문제가 많은 DOM API 를 사용하지 않음에 있다.


03. 작게 시작하기

2강에 이어서…
DOM을 없애서 문제를 해결했다? -> React 나름의 획기적인 접근 방법이라 할 수 있다.
 
※ 최소 기능 제품 : Minimum Viable Product -> MVP 
최소한의 기능을 구현한 제품.
React에 MVP를 적용해보자. 리액트에 여러 기능들을 이것저것 넣게 되면 가장 중요한 특징에 대한 선명도가 떨어질 수 있다. 
따라서 DOM을 없애 문제를 해결한다는 근본 기능에 초점을 두고 개발을 해야 한다.

* React가 궁금하면, 역사를 살펴보자!
React가 개발되어온 과정을 한번 살펴보자.
초창기 버전에는 MVP 버전만 포함되어 있다. 
React의 옛날 고리짝적 버전인 MVP 버전을 보면, React는 UI를 만들기 위한 라이브러리라고 정의되어 있다. (왜냐하면, DOM과 연결된 뷰, UI상의 문제를 해결하기위해 개발된 것이기 때문에)


04. 변경하지 않고 확대하기
추가, 변경 기능을 가장 잘 핸들링할 수 있는 방법에 대해 생각해보자.

소프트웨어의 어떤 부분은 안 바뀌는 부분으로 만들어 놓고 / 어떤 부분은 바뀌도록 만들어 보자.

안 바뀌는 부분과 바뀌는 부분을 분리해서 개발하는 구조 
- 플러그인
	애드온이라고 하기도 한다. 대표적인 플러그인 아키텍처에는 ‘크롬’이 있다. 
	크롬 웹스토어에 들어가 보면 ‘확장 프로그램’이라는 게 있다. 이 크롬 익스텐션이 바로 플러그인이라고 할 수 있다. 
	크롬의 기능을 바꾸지 않으며, 더 많은 일을 할 수 있게 해 주는 게 이 크롬 익스텐션이다. 
	
- 미들웨어 플러그인과 유사한 구조.
	ex) 익스프레스 - 노드의 웹 어플 프레임워크
	자신이 제공하는 몇몇 기능이 있긴 하지만, 더 추가적으로 많은 기능을 모두 다 제공할 수 없기 때문에 미들웨어라고 하는 소프트웨어를 추가할 수 있는 구조를 제공해 주고, 전체적으로 Express가 제공하는 기능이 확대될 수 있도록 해 준다.
	이렇게 함께 작동되는 프로그램이 있어도, express 자체의 기능은 전혀 변경되지 않는다 (예시 myLogger와 함께 적용되었을 때.)

플러그인, 미드웨어의 공통점 : 호스트 ‘코드’에 대한 변경 없이 새로운 기능을 사용할 수 있는 환경을 만들어 준다.


05. 웹프론트엔드 개발환경 (더 알아보기)

Bundler : web pack
webpack의 기능 : 개별적인 기능을 제공하는 데 필요한 코어의 구조를 가지고 있고, 실 사용자들이 필요로 하는 기능은 plugin, middleware 의 기능이다.
웹팩은 플러그인이라는 아키텍처를 이용해 사용자들에게 다양하고 유연한 기능을 제공하고 있다.

Babel : transpiling을 해 주는 loader. 플러그인 아키텍처로 만들어져 있다. 대부분의 기능들은 plugin을 이용해 제공된다. 
VSC(에디터) : 이 역시 수 많은 plugin으로 이루어져 있다. (익스텐션이라고 부른다.) 코어는 전혀 변하지 않지만, 기능은 끊임없이 확장시킬 수 있게 된다.










Part2. React 만들기
 
01. 해결책 만들기
DOM은 기능은 많지만, 복잡한 문제를 다루기에는 불편하다. 유지보수, 확장이 힘들어지는 문제를 가지고 있다.
소프트웨어란, 한 사람이 계속 Maintenance 할 수 있는 게 아니다. 그것을 유지보수 하는 사람들은 계속해서 바뀔 것이라는 사실을 명심해야 한다.
 
그렇다면 이 ‘유지보수’의 어려움을 어떻게 해결할 것인가?
-> React의 경우에는 Virtual DOM을 만들어서 DOM자체의 사용을 최소화했다.
 
 
HTML은 흔히 보는 마크업 파일이다. 태그, attr, value 의 문자열로 되어 있다.
 
이 태그들을 브라우저가 읽어서 DOM 형태로 만들고, 이것을 렌더링시킴으로서 우리가 페이지를 볼 수 있게 된다.
 
오른쪽의 자바스크립트 파일은 html을 생성할 때 쓰이는 코드이다. 메소드들을 이용해 DOM 요소들을 생성해 낼 수 있다. 
 
여기서 문제는? html은 부모/자식 태그라고 하는 복잡한 구조를 가지고 있다. 따라서 복잡하고, 일관성이 없는 DOM API를 이용해 html을 조작하려고 하면? 오류가 생기게 된다.
 
하지만 DOM API를 쓰지 않으면 html을 조작할 수 있는 방법이 없다.
 
 
React 팀은 어떻게 생각했을까? -> DOM을 걍 함 안 써보자! (굉장히 급진적인 발상…)
 
실상 -> DOM을 ‘개발자’에게 쓰지 못하게 하자.  개발자에게 DOM이 사라진거나 마찬가지.
 
(소프트웨어 개발하는 데 있어서 굉장히 흔하게 쓰이는 아이디어)
 
사실 문자열로 되어 있는 파일 (HTML)은 굉장히 다루기 까다로운 것이다. 우리는 ‘개발자’이기 때문에 결과물을 연상, 상상할 수 있는 것.
 
그러면 이 복잡성을 줄이려면? 문자열을 없애보자. 문자열이 아니라, HTML이 ‘객체’를 다루게 만들어보자.
 
(객체는 문자열보다 상대적으로 더 쉬운 포맷이라고 할 수 있다.) 
 
 
DOM API가 다루기 까다로운 것이므로, 사용자들에게는 DOM API보다 더 쉬운 걸 제공해주고, DOM API는 개발자들이 제어권을 가지고, 더 쉬운 방식으로 다루게 해 보자.
 
Step
복잡한 DOM 객체를 아주 간단한 객체로 바꾸어 보자.
그 간단한 객체를 다시 복잡한 DOM으로 바꾸어 보자.
 
 
html의 구조를 살펴보면?
부모, 자식 구조로 이루어져 있다.
태그는 각각의 attribute를 가지고 있다.
attritbute에는 각각의 value를 가지고 있다.
 
 아이디어 -> 복잡한 것이 있으면 간단한 것으로 바꿔보고, 그 간단한 것에서부터 출발하는 것이다.

