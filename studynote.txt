김민태의 프론트엔드 아카데미 : 만들어보며 이해하는 React & Redux


Part 1. 시작하며
01. 무엇을 배울 것인가
소프트웨어 : 문제를 해결하기 위한 무언가.
- 계속 바뀌어야 함
- 안전하게, 문제 없이 바뀌어야 함
- 안전하게 바뀌기 위해서는 코드에 대한 이해가 필요함
- 어떤 코드가 좋은 코드인가? 에 대한 연구를 지속함 
- 핵심 키워드 : 변경 용이성, ‘어떻게 하면 잘 바꿀 수 있을까’, ‘바꿔도 올바르게 동작할 수 있을까’, ‘만약 동작하지 못해도, 올바르지 못한 동작이 최소한의 영향 범위를 가졌는가?’


어떤 것이 변화했을 때, 그 변화에 대한 영향 범위를 특정 범위로 축소할 수 있는 식으로 코드가 만들어지면
훨씬 더 안전하고 단단하고 견고한 ‘코드’가 된다는 것을 알 수 있다.

핵심 -> 소프트웨어는 변한다. 변하는데, 과연 어떻게 더 빨리, 안전하게 변화시킬 수 있을까? 


02. 1타 2피, 3피, 4피
React와 Redux는 왜 만들어졌을까? -> 문제를 해결하기 위해
그렇다면 문제점은 무엇일까? -> 웹 어플을 개발함에 있어서 가장 많은 문제를 일으키는 요소가 있다.

그것은 바로 DOM API! (DOM이란? 브라우저가 Html 렌더링하기 위해 필요한 모든 것을 가공시켜 놓은 객체.)
DOM API의 경우, 엄청나게 많은 기능을 제공하지만 다루는 게 굉장히 까다롭다.
따라서 웹 앱을 만드는데 만드는 데 최적화되어 있지 않다. (목적 자체가 웹앱을 만들기 위해 설계된 게 아님.)

SPA : Html은 문서다. 우리가 아는 웹의 경우, html에서 html로 넘어갈 때 화면이 깜빡인다. 어플리케이션의 경우 화면이 넘어갈 때마다 리로딩 되면 굉장히 불편해진다.
우리가 앱을 사용할 때를 한번 생각해보자. 아이콘 하나를 누를 때마다 페이지 전환이 되면 얼마나 불편할 것인가?
이걸 해결하게 위해서 만들어진 게 React, Vue  같은 프레임워크들이다.

DOM API의 return 값을 모두 참조형이다. 
여기서 깨알 복습
document.body.appendChild(); html에 무언가를 붙여넣을 때 쓰는 것
document.getElementsByTageName(‘h2’): 태그로 선택하기
document.querySelectorall(‘h1’):태그로 선택하기

HTML 컬렉션은 라이브 오브젝트고, 라이브 오브젝트는 참조를 항상 가지고 있다.
그말은 HTML 컬렉션이 아닌 것들은 라이브 오브젝트가 아니며, 참조가 끊긴다는 뜻이다.
예를 들면 H1은 HTML, 컬렉션이지만, 대문자 ‘H1’은 NodeList이다. NodeList는 라이브 오브젝트가 아니라 참조가 연속되지 않고 끊긴다.
이렇게 일괄성 없는 동작들이 DOM API에 너무나 많이 있다는 점…ㅠ ㅠ



클라이언트 어플리케이션을 만들며 많이 접하는 패턴 중 하나가 MVC 패턴(Model-View-Controller 패턴)이다.
모델 뷰 컨트롤라고 불리는 이 패턴은, UI요소, 비즈니스 로직, 그리고 데이터들을 분리해서 복잡도를 낮추게 하는 것이다.
성격이 다른 애들이 뒤섞여 있으면 복잡도가 높아지지 않겠는가? 비슷한 것들끼리 분류시켜서 복잡도를 낮추자!
이 MVC모델 같은 경우에는, 서버의 모델에 굉장히 종속성을 많이 갖고 있게 된다. 따라서 서버가 바뀌면 클라이언트도 영향을 많이 받게 되는 단점을 가지게 된다.

그렇다면 서버 종속성을 끊어내고, 클라이언트에 맞는 패턴을 가질 수는 없을까?
모델-뷰-뷰모델 MVVM 
클라이언트에서 상태를 독립적으로 가지고 있고, 독립 상태를 유지할 수 있는 여러 컨셉들을 가지고 있게끔.
React, Angular, Vue에 굉장히 영향을 많이 미친 패턴이다.

But MVC나 MVVM은 DOM 자체의 문제를 해결해 주지는 않는다.

JQuery의 경우에도 돔을 쉽게 포장했을 뿐, 근본적으로 DOM의 문제들을 해결해준 건 아니다.
React의 경우에는, 1타 2피 3피 4피가 가능한 컨셉을 발견하게 된다. 바로 DOM 자체를 쓰지 않는 것이다. 
DOM을 쓰지 않는다고? 어떻게 UI를 핸들링할까?
잊지 말자. React의 가치는 문제가 많은 DOM API 를 사용하지 않음에 있다.
